name: Django Backend CI/CD

# 触发条件
on:
  push:
    branches:
      - master
      - zfy

# 环境变量
env:
  PYTHON_VERSION: "3.12"
  ENV: prod

jobs:
  # 代码质量检查
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install flake8==7.1.2 black==25.1.0 isort==6.0.1

      - name: Lint with flake8
        run: |
        #   # 停止构建过程如果存在语法错误或未定义名称
        #   flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        #   # 退出，但不停止构建过程
        #   flake8 . --count --exit-zero --max-complexity=10 --max-line-length=9999 --statistics

  # 测试阶段
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install pytest pytest-cov
          uv sync

      - name: Test with pytest
        run: |
          pytest --cov=. --cov-report=xml

      - name: Integration tests
        run: |
          pytest tests/

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push studyspot-backend Docker image
        run: |
          docker build -t polarsnowleopard/studyspot-backend:latest .
          docker push polarsnowleopard/studyspot-backend:latest

  # 部署到线上开发测试环境
  deploy-production:
    name: Deploy to Online Development Test Environment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v3

      - name: Create directory on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            mkdir -p ~/studyspot

      - name: Copy files to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/studyspot"
          strip_components: 0

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd ~/studyspot
            sudo docker pull polarsnowleopard/studyspot-backend:latest
            sudo docker-compose down || true
            sudo docker-compose up -d